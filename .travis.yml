env:
  global:
    - QEMU_VER=v2.12.0-1

matrix:
  include:
    # Alpine containers
    - os: linux
      language: bash
      sudo: true
      services:
        - docker
      env: OS=alpine NODE=10 ARCH=arm32v6 QEMU_ARCH=arm
    - os: linux
      language: bash
      sudo: true
      services:
        - docker
      env: OS=alpine NODE=8 ARCH=arm32v6 QEMU_ARCH=arm
    - os: linux
      language: bash
      sudo: true
      services:
        - docker
      env: OS=alpine NODE=6 ARCH=arm32v6 QEMU_ARCH=arm

    # OSX builds
    - os: osx
      language: node_js
      node_js: 10
    - os: osx
      language: node_js
      node_js: 8
    - os: osx
      language: node_js
      node_js: 6

before_install:
  - |
    if [[ "$TRAVIS_OS_NAME" == "linux" ]]
    then
      if [ ! -z "$ARCH" ]
      then
        docker run --rm --privileged multiarch/qemu-user-static:register --reset

        mkdir docker
        cd docker

        wget -N https://github.com/multiarch/qemu-user-static/releases/download/${QEMU_VER}/x86_64_qemu-${QEMU_ARCH}-static.tar.gz

        echo "FROM $ARCH/node:$NODE-$OS" >> Dockerfile
        echo "ADD x86_64_qemu-$QEMU_ARCH-static.tar.gz /usr/bin">> Dockerfile

        NODE="$NODE-$ARCH-qemu"

        docker build -t node:$NODE-$OS .
      fi

      docker run -dt --name build -e PREBUILD_TOKEN=$PREBUILD_TOKEN -v $TRAVIS_BUILD_DIR:/src node:$NODE-$OS

      if [[ "$OS" == "alpine" ]]
      then
        docker exec -t build sh -c "apk add --no-cache build-base libtool autoconf automake python linux-headers"
      fi

      if [[ "$OS" == "jessie" ]]
      then
        docker exec -t build sh -c "apt update"
        docker exec -t build sh -c "apt install -y build-essential libtool autoconf automake python"
      fi
    fi

install:
  - |
    if [[ "$TRAVIS_OS_NAME" == "osx" ]]
    then
      npm i
    else
      docker exec -t build sh -c "cd /src && npm i && ./node_modules/.bin/node-gyp rebuild"
    fi

script:
  - |
    if [[ "$TRAVIS_OS_NAME" == "osx" ]]
    then
      npm test
    else
      docker exec -t build sh -c "cd /src && npm test"
    fi

after_success:
  - |
    if [[ "$TRAVIS_OS_NAME" == "osx" ]]
    then
      npm run coverage
    else
      docker exec -t build sh -c "cd /src && npm run coverage"
    fi
